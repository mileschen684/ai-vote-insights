
import React, { useEffect, useState } from 'react';
import SentimentChart from './components/SentimentChart';
import { analyzeSentiment } from './utils/fakeAI';

function App() {
Â  const [voters, setVoters] = useState([]);
Â  useEffect(() => {
Â Â Â  fetch('/data/mock_voter_data.csv')
Â Â Â Â Â  .then(res => res.text())
Â Â Â Â Â  .then(text => {
Â Â Â Â Â Â Â  const rows = text.split('\n').slice(1);
Â Â Â Â Â Â Â  const parsed = rows.map(row => {
Â Â Â Â Â Â Â Â Â  const [id, comment] = row.split(',');
Â Â Â Â Â Â Â Â Â  return { id, comment, sentiment: analyzeSentiment({ comment }) };
Â Â Â Â Â Â Â  });
Â Â Â Â Â Â Â  setVoters(parsed);
Â Â Â Â Â  });
Â  }, []);

Â  return (
Â Â Â  <div>
Â Â Â Â Â  <h1>ðŸ§  AI Vote Insights</h1>
Â Â Â Â Â  <SentimentChart data={voters} />
Â Â Â  </div>
Â  );
}

export default App;

// Utility function to simulate detailed voter data processing
function processVoterDataInDepth(voters) {
Â  const results = [];

Â  for (let i = 0; i < voters.length; i++) {
Â Â Â  const voter = voters[i];
Â Â Â  let score = 0;

Â Â Â  // Simulate 300 lines of logic
Â Â Â  for (let j = 0; j < 300; j++) {
Â Â Â Â Â  // Example logic: add or subtract based on character codes
Â Â Â Â Â  const char = voter.comment[j % voter.comment.length] || '';
Â Â Â Â Â  score += char.charCodeAt(0) % 2 === 0 ? 1 : -1;
Â Â Â  }

Â Â Â  results.push({
Â Â Â Â Â  ...voter,
Â Â Â Â Â  processedScore: score,
Â Â Â  });
Â  }

Â  return results;
}
